# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ConverterDialog
                                 A QGIS plugin
 Конвертирует туда сюда
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-29
        git sha              : $Format:%H$
        copyright            : (C) 2024 by command A, power PI
        email                : unknown
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import sys
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QFileDialog, QTreeWidgetItem
from collections import defaultdict
import ezdxf

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Dxf_Pgsql_Converter_Dialog_Base.ui'))


class Dxf_Pgsql_Converter_Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(Dxf_Pgsql_Converter_Dialog, self).__init__(parent)
        self.setupUi(self)
        self.pushButton.clicked.connect(self.select_dxf_button)
    
    def select_dxf_button(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_name, _ = QFileDialog.getOpenFileName(self, "Select DXF File", "", "DXF Files (*.dxf);;All Files (*)", options=options)
        if file_name:
            dxf = ezdxf.readfile(file_name)
            layers = defaultdict(list)
            if dxf:
                for entity in dxf.modelspace():
                    layer_name = entity.dxf.layer
                    layers[layer_name].append(entity)
            self.populate_tree_widget(list(layers.keys()))

    def populate_tree_widget(self, layers):
        self.treeWidget.clear()  # Clear the tree widget before populating it
        for layer in layers:
            item = QTreeWidgetItem([layer])
            self.treeWidget.addTopLevelItem(item)

